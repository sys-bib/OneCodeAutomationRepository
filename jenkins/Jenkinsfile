def secrets = [
  [path: 'static-secret/gc-platform-automation-testing', engineVersion: 2, secretValues: [
    [envVar: 'password', vaultKey: 'password'],
    [envVar: 'BROWSERSTACK_ACCESS_KEY', vaultKey: 'BROWSERSTACK_ACCESS_KEY'],
    [envVar: 'BROWSERSTACK_USERNAME', vaultKey: 'BROWSERSTACK_USERNAME'],
    [envVar: 'PERCY_TOKEN_default', vaultKey: 'PERCY_TOKEN_default'],
    [envVar: 'PERCY_TOKEN_pmi_impact', vaultKey: 'PERCY_TOKEN_pmi-impact'],
    [envVar: 'PERCY_TOKEN_pmiscience', vaultKey: 'PERCY_TOKEN_pmiscience'],
    [envVar: 'PERCY_TOKEN_unsmokeyourworld.com', vaultKey: 'PERCY_TOKEN_unsmokeyourworld']
  ]]
 ]

def configuration = [vaultUrl: 'https://vault.vault-prd.shared-services.eu-west-1.aws.pmicloud.biz:8200',
                     skipSslVerification: 'true',
                     vaultCredentialId: 'vault-igcpes-prd',
                     engineVersion: 2,
                     vaultNamespace: 'igcpes-prd']

pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  serviceAccountName: jenkins
                  securityContext:
                    fsGroup: 1337
                  imagePullSecrets: [artifactory-igcpes-prod]
                  volumes:
                  - name: jenkins-docker-cfg
                    projected:
                      sources:
                      - secret:
                          name: artifactory-igcpes-prod
                          items:
                            - key: .dockerconfigjson
                              path: config.json
                  - name: cache-volume
                    emptyDir: {}
                  containers:
                  - name: alpine 
                    image: art.pmideep.com/ene-docker-prod/docker-ene-alpine-custom-3.13:0.2.0
                    imagePullPolicy: IfNotPresent
                    resources:
                      requests:
                        cpu: 200m
                        memory: 800Mi
                      limits:
                        cpu: 400m
                        memory: 1500Mi
                    tty: true
                    volumeMounts:
                      - name: jenkins-docker-cfg
                        mountPath: /kaniko/.docker
                      - name: cache-volume
                        mountPath: /cache
            '''
        }
    }
    tools { 
        maven 'Maven 3.8.6'
        nodejs "NodeJs14"
    }
    environment {
        browserstack_creds = 'pmi-browserstack-creds'
        project = "${_test_project_name}"
    }
    stages {
        stage('Checkout')
        {
            steps {
                checkout([$class: 'GitSCM',
                        branches: [[name: "*/${env.REPO_BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            credentialsId: '662605c7-335b-4d8f-86c7-4737c4cf6708',
                            url: 'https://source.app.pconnect.biz/scm/igcpes/gc-platform-automation-testing.git'
                ]]])
            }
        }

        stage('Config setup') {
            steps {
                container('alpine') {
                    script {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        def percy_token_selected = "${env.PERCY_TOKEN_default}"
                        switch (env.project) {
                            case 'pmi-impact.com':
                                percy_token_selected = "${PERCY_TOKEN_pmi_impact}"
                                break
                            case 'pmiscience.com':
                                percy_token_selected = "${PERCY_TOKEN_pmiscience}"
                                break
                            default:
                                percy_token_selected = "${PERCY_TOKEN_default}"
                                break
                        }
                        env.PERCY_TOKEN = percy_token_selected
                        sh """
                            sed -i "s/<BROWSERSTACK_USERNAME>/${BROWSERSTACK_USERNAME}/" browserstack.yml
                            sed -i "s/<BROWSERSTACK_ACCESS_KEY>/${BROWSERSTACK_ACCESS_KEY}/" browserstack.yml
                            
                            npm install
                            npm install --save-dev @percy/cli
    
                            export PERCY_TOKEN=${percy_token_selected}
                            echo \$PERCY_TOKEN
                        """
                    }
                }
                }
            }
        }
        stage('Run Testing') {
            steps {
                container('alpine') {
                    browserstack(credentialsId: 'pmi-browserstack-creds') {
                        sh """
                            npm run test-${project}
                        """
                    }
                     // Enable reporting in Jenkins
                    browserStackReportPublisher 'automate'                
                }
            }
        }
    }
}